<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>F1 telemetry</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        class UI {
            constructor() {
            }

            renderLights(num) {
                let lamps = document.querySelectorAll("#lamp-container circle");

                for (let i = 0; i < 5; i++) {
                    if (i <= num - 1) {
                        lamps[i].classList.remove("off");
                        lamps[i].classList.add("on");
                    } else {
                        lamps[i].classList.remove("on");
                        lamps[i].classList.add("off");
                    }
                }
            }
        }

        class WebSocketHandler {
            constructor(url, ui) {
                this.ui = ui
                this.ws = new WebSocket(url)
                this.ws.addEventListener("open", this.openHandler)
                this.ws.addEventListener("close", this.closeHandler)
                this.ws.addEventListener("error", this.errorHandler)
                this.ws.addEventListener("message", this.messageHandler.bind(this))
            }

            openHandler() {
                console.log("open!");
            }

            closeHandler() {
                console.log("close!");
            }

            errorHandler() {
                console.log("error!");
            }

            /**
             *
             * @param messageEvent:MessageEvent
             */
            messageHandler(messageEvent) {
                const data = JSON.parse(messageEvent.data);

                if (!data.type) {
                    return;
                }

                switch (data.type) {
                    case "button":
                        break;
                    case "carDamage":
                        break;
                    case "sessionHistory":
                        break;
                    case "motion":
                        break;
                    case "telemetry":
                        break;
                    case "participants":
                        break;
                    case "lapData":
                        this.handleLapData(data);
                        break;
                    case "session":
                        this.handleSession(data)
                        break;
                    case "carSetup":
                        this.handleCarSetup(data)
                        break;
                    case "startLight":
                        this.handleStartLight(data)
                        break;
                    default:
                        console.log(data.type);
                }
            }

            handleSession(data) {
            }

            handleCarSetup(data) {
            }

            handleLapData(data) {
            }

            handleStartLight(data) {
                this.ui.renderLights(data.data.NumberOfLights);
            }
        }

        function main() {
            var ws = new WebSocketHandler("ws://localhost:8080/socket", new UI());
            index();
        }

        function index() {
            const ctx = document.getElementById('myChart');

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                    datasets: [{
                        label: '# of Votes',
                        data: [12, 19, 3, 5, 2, 3],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
    </script>
    <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"
    />
    <style>
        #lamp-container circle.off {
            fill: #363636; /* green */
        }

        #lamp-container circle.on {
            fill: #EE1111; /* green */
        }
    </style>
</head>
<body onload="main()">
<main class="container">
    <span>{{.IpAddress}}{{.UdpPort}}</span>
    <div class="chart-container">
        <canvas id="myChart"></canvas>
    </div>
    <div id="lamp-container">
        <svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
            <circle class="off" cx="50" cy="50" r="40"/>
        </svg>

        <svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
            <circle class="off" cx="50" cy="50" r="40"/>
        </svg>

        <svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
            <circle class="off" cx="50" cy="50" r="40"/>
        </svg>

        <svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
            <circle class="off" cx="50" cy="50" r="40"/>
        </svg>

        <svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
            <circle class="off" cx="50" cy="50" r="40"/>
        </svg>
    </div>
</main>
</body>
</html>