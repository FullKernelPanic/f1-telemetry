name: Github Release

on:
  workflow_dispatch:

jobs:
  generate-release:
    runs-on: ubuntu@latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          GH_CLI_VERSION="2.49.2"
          # Download the GitHub CLI tarball for the specified version
          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y))
          wget https://github.com/cli/cli/releases/download/v$GH_CLI_VERSION/gh_${GH_CLI_VERSION}_linux_amd64.tar.gz
          # Extract the tarball
          tar -xzf gh_${GH_CLI_VERSION}_linux_amd64.tar.gz
          # Move the binaries to /usr/local/bin
          sudo mv gh_${GH_CLI_VERSION}_linux_amd64/bin/gh /usr/local/bin/
          # Verify the installation
          gh --version

      - name: Setup Go environment
        uses: actions/setup-go@v5.0.1
        with:
          # The Go version to download (if necessary) and use. Supports semver spec and ranges. Be sure to enclose this option in single quotation marks.
          go-version: '1.22.2'
          # Path to the go.mod or go.work file.
          go-version-file: 'go.mod'
          # Set this option to true if you want the action to always check for the latest available version that satisfies the version spec
          check-latest: true
          # Used to pull Go distributions from go-versions. Since there's a default, this is typically not supplied by the user.
          # When running this action on github.com, the default value is sufficient. 
          # When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          # token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Used to specify whether caching is needed. Set to true, if you'd like to enable caching.
          cache: true # optional, default is true
          # Used to specify the path to a dependency file - go.sum
          cache-dependency-path: 'go.sum'
          # Target architecture for Go to use. Examples: x86, x64. Will use system architecture by default.
          architecture: 'x64'

      - name: Set Release
        run: |
          RELEASE_BODY="lorem ipsum dolor"
          TAG="testtag"
          RELEASE_TITLE="Release test"

          gh release create "$(echo "$TAG")" -t "ðŸ“¦ ${RELEASE_TITLE}" --notes "$(echo "$RELEASE_BODY")"
